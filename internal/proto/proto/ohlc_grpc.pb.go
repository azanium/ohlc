// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: proto/ohlc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OHLCService_StreamOHLC_FullMethodName = "/ohlc.OHLCService/StreamOHLC"
)

// OHLCServiceClient is the client API for OHLCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OHLCServiceClient interface {
	// StreamOHLC streams real-time OHLC updates for requested symbols
	StreamOHLC(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (OHLCService_StreamOHLCClient, error)
}

type oHLCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOHLCServiceClient(cc grpc.ClientConnInterface) OHLCServiceClient {
	return &oHLCServiceClient{cc}
}

func (c *oHLCServiceClient) StreamOHLC(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (OHLCService_StreamOHLCClient, error) {
	stream, err := c.cc.NewStream(ctx, &OHLCService_ServiceDesc.Streams[0], OHLCService_StreamOHLC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &oHLCServiceStreamOHLCClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OHLCService_StreamOHLCClient interface {
	Recv() (*OHLCData, error)
	grpc.ClientStream
}

type oHLCServiceStreamOHLCClient struct {
	grpc.ClientStream
}

func (x *oHLCServiceStreamOHLCClient) Recv() (*OHLCData, error) {
	m := new(OHLCData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OHLCServiceServer is the server API for OHLCService service.
// All implementations must embed UnimplementedOHLCServiceServer
// for forward compatibility
type OHLCServiceServer interface {
	// StreamOHLC streams real-time OHLC updates for requested symbols
	StreamOHLC(*SubscribeRequest, OHLCService_StreamOHLCServer) error
	mustEmbedUnimplementedOHLCServiceServer()
}

// UnimplementedOHLCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOHLCServiceServer struct {
}

func (UnimplementedOHLCServiceServer) StreamOHLC(*SubscribeRequest, OHLCService_StreamOHLCServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOHLC not implemented")
}
func (UnimplementedOHLCServiceServer) mustEmbedUnimplementedOHLCServiceServer() {}

// UnsafeOHLCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OHLCServiceServer will
// result in compilation errors.
type UnsafeOHLCServiceServer interface {
	mustEmbedUnimplementedOHLCServiceServer()
}

func RegisterOHLCServiceServer(s grpc.ServiceRegistrar, srv OHLCServiceServer) {
	s.RegisterService(&OHLCService_ServiceDesc, srv)
}

func _OHLCService_StreamOHLC_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OHLCServiceServer).StreamOHLC(m, &oHLCServiceStreamOHLCServer{stream})
}

type OHLCService_StreamOHLCServer interface {
	Send(*OHLCData) error
	grpc.ServerStream
}

type oHLCServiceStreamOHLCServer struct {
	grpc.ServerStream
}

func (x *oHLCServiceStreamOHLCServer) Send(m *OHLCData) error {
	return x.ServerStream.SendMsg(m)
}

// OHLCService_ServiceDesc is the grpc.ServiceDesc for OHLCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OHLCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ohlc.OHLCService",
	HandlerType: (*OHLCServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOHLC",
			Handler:       _OHLCService_StreamOHLC_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/ohlc.proto",
}
